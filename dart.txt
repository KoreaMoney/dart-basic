# main function
  - Dart 프로그래밍에서 main() 함수는 필수적입니다
  1. 진입점 역할: main() 함수는 모든 Dart 앱의 진입점 역할을 합니다. 즉, 프로그램 실행이 시작되는 지점입니다.
  2. 반환 타입: main() 함수는 일반적으로 void를 반환합니다. 이는 함수가 특별한 값을 반환하지 않음을 의미합니다.
  3. 인수 처리: main() 함수는 선택적으로 인수를 받을 수 있습니다. 이를 통해 프로그램 실행 시 외부에서 전달되는 정보를 처리할 수 있습니다.
  4. 프로그램 구조: main() 함수는 프로그램의 전체적인 구조와 흐름을 정의하는 데 중요한 역할을 합니다. 여기서 다른 함수들을 호출하거나 프로그램의 주요 로직을 실행할 수 있습니다.
  5. 표준화: main() 함수는 Dart 언어의 표준 규칙 중 하나로, 모든 실행 가능한 Dart 프로그램에 존재해야 합니다.

따라서, Dart 프로그램을 작성할 때 main() 함수는 반드시 포함되어야 하며, 이는 프로그램의 시작점이자 핵심 구조를 정의하는 중요한 요소입니다.

# 세미콜론(;)
  1. Dart에서 세미콜론(;)은 중요한 역할을 합니다.
  2. 문장의 끝 표시: 세미콜론은 Dart에서 문장의 끝을 나타냅니다. 각 명령문이나 표현식 뒤에 세미콜론을 사용해야 합니다.
  3. 필수 사용: Dart는 다른 일부 언어와 달리 자동으로 세미콜론을 삽입하지 않습니다. 프로그래머가 명시적으로 세미콜론을 입력해야 합니다.
  4. 코드의 끝 표시: 세미콜론은 해당 코드의 끝을 의미합니다.
  5. 예외 상황: 세미콜론이 필요하지 않은 경우도 있습니다. 예를 들어, 일부 제어 구조나 함수 정의에서는 세미콜론을 사용하지 않습니다.
  6. 생성자에서의 사용: Dart에서 바디가 비어있는 생성자는 세미콜론으로 끝낼 수 있습니다.

세미콜론의 올바른 사용은 Dart 코드의 가독성과 정확성을 높이는 데 중요합니다. 
프로그래머는 각 문장이 끝날 때마다 세미콜론을 추가하는 습관을 들이는 것이 좋습니다.

# 세미콜론을 사용하지 않는 경우
  1. 제어 구조의 끝: if, for, while 등의 제어 구조 문장 끝에는 세미콜론이 필요하지 않습니다. 이러한 구조는 중괄호 {}로 끝나기 때문입니다.
  2. 함수 정의: 함수의 본문이 중괄호로 둘러싸인 경우, 함수 정의 끝에 세미콜론이 필요하지 않습니다.
  3. 클래스 정의: 클래스 선언의 끝에는 세미콜론이 필요하지 않습니다.
  4. switch 문의 case 레이블: case 문 뒤에는 세미콜론 대신 콜론(:)을 사용합니다.
  5. 추상 메서드: 추상 클래스 내의 추상 메서드 선언 끝에는 세미콜론을 사용합니다.
  6. 라이브러리 import 문: import 문 끝에는 세미콜론이 필요하지 않습니다.
  7. 한 줄 주석: // 로 시작하는 한 줄 주석 끝에는 세미콜론이 필요하지 않습니다.

이러한 경우를 제외하고는 대부분의 Dart 문장 끝에 세미콜론을 사용해야 합니다.
세미콜론의 올바른 사용은 코드의 가독성과 정확성을 높이는 데 중요합니다.

# VARIABLES
  1. var는 지역변수를 선언할 때 사용합니다.
  ex) void main() {
        var name = "hello";
        name = 1; // type이 맞지 않아 문자열로 수정해야 합니다.
      }
  2. 명시적으로 변수의 타입 지정, class에서 변수나 속성을 선언할때 type를 지정합니다.
  eX) void main() {
        String name = "hello";
      } 
  3. 
